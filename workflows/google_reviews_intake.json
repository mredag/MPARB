{
  "name": "Google Reviews Intake",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 5
            }
          ]
        }
      },
      "id": "f4b1c5e0-8b2a-4c3d-9e5f-1a2b3c4d5e6f",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Simulate Google Business Profile API call to fetch new reviews\n// In production, this would be replaced with actual Google Business Profile API integration\n// For now, we'll create a mock review for testing purposes\n\nconst mockReviews = [\n  {\n    reviewId: `gbp_review_${Date.now()}`,\n    rating: 5,\n    text: \"Harika hizmet aldÄ±k, Ã§ok memnun kaldÄ±k!\",\n    author: \"Ahmet YÄ±lmaz\",\n    createTime: new Date().toISOString(),\n    updateTime: new Date().toISOString()\n  }\n];\n\n// In production, replace this with actual Google Business Profile API call:\n// const response = await fetch(`https://mybusiness.googleapis.com/v4/accounts/${accountId}/locations/${locationId}/reviews`, {\n//   headers: {\n//     'Authorization': `Bearer ${$env.GOOGLE_ACCESS_TOKEN}`,\n//     'Content-Type': 'application/json'\n//   }\n// });\n// const data = await response.json();\n// const reviews = data.reviews || [];\n\n// For testing, return mock data\n// In production, this should check for new reviews since last execution\nconst shouldReturnMockData = process.env.NODE_ENV === 'development' || process.env.ENABLE_MOCK_REVIEWS === 'true';\n\nif (shouldReturnMockData && Math.random() > 0.8) {\n  // Only return mock data 20% of the time to simulate sporadic reviews\n  return mockReviews.map(review => ({ json: review }));\n}\n\n// Return empty array when no new reviews (most of the time)\nreturn [];"
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "Fetch Reviews",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Normalize Google Business Profile review data\nconst review = $input.all()[0].json;\n\n// Skip if no review data\nif (!review || !review.reviewId) {\n  return [];\n}\n\n// Normalize review data to standard format\nconst normalizedReview = {\n  review_id: review.reviewId,\n  rating: parseInt(review.rating) || 0,\n  text: review.text || '',\n  author: review.author || 'Anonymous',\n  timestamp: review.createTime || new Date().toISOString(),\n  correlation_id: require('crypto').randomUUID(),\n  platform: 'google_reviews',\n  raw_data: review\n};\n\n// Determine action based on rating\nif (normalizedReview.rating >= 4) {\n  normalizedReview.action = 'process';\n} else if (normalizedReview.rating <= 2) {\n  normalizedReview.action = 'escalate';\n} else {\n  normalizedReview.action = 'log_only';\n}\n\nconsole.log('Normalized Google Review:', JSON.stringify(normalizedReview));\n\nreturn [{ json: normalizedReview }];"
      },
      "id": "b2c3d4e5-f6g7-8901-bcde-f23456789012",
      "name": "Normalize Review Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "name"
        },
        "table": {
          "__rl": true,
          "value": "reviews",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "review_id": "={{ $json.review_id }}",
            "rating": "={{ $json.rating }}",
            "correlation_id": "={{ $json.correlation_id }}"
          },
          "matchingColumns": [],
          "schema": []
        },
        "options": {
          "ignoreOnConflict": true
        }
      },
      "id": "c3d4e5f6-g7h8-9012-cdef-345678901234",
      "name": "Insert Review Record",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        900,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "PostgreSQL Main"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "rating-check",
              "leftValue": "={{ $json.rating }}",
              "rightValue": 4,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "d4e5f6g7-h8i9-0123-defg-456789012345",
      "name": "Rating Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{ $env.N8N_WEBHOOK_URL }}/webhook/processor",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "x-correlation-id",
              "value": "={{ $json.correlation_id }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "={{ $json.text }}"
            },
            {
              "name": "platform",
              "value": "google_reviews"
            },
            {
              "name": "timestamp",
              "value": "={{ $json.timestamp }}"
            },
            {
              "name": "correlation_id",
              "value": "={{ $json.correlation_id }}"
            },
            {
              "name": "review_id",
              "value": "={{ $json.review_id }}"
            },
            {
              "name": "rating",
              "value": "={{ $json.rating }}"
            },
            {
              "name": "author",
              "value": "={{ $json.author }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e5f6g7h8-i9j0-1234-efgh-567890123456",
      "name": "Call Processor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1340,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "low-rating-check",
              "leftValue": "={{ $json.rating }}",
              "rightValue": 2,
              "operator": {
                "type": "number",
                "operation": "lte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "f6g7h8i9-j0k1-2345-fghi-678901234567",
      "name": "Low Rating Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1340,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Log negative review for escalation\nconst logData = {\n  message: `Negative Google Review (${$json.rating} stars) from ${$json.author}: \"${$json.text}\"`,\n  correlation_id: $json.correlation_id,\n  review_id: $json.review_id,\n  rating: $json.rating,\n  author: $json.author,\n  text: $json.text,\n  timestamp: $json.timestamp,\n  action: 'escalated'\n};\n\nconsole.log('Negative Google Review Alert:', JSON.stringify(logData));\n\nreturn [{ json: logData }];"
      },
      "id": "g7h8i9j0-k1l2-3456-ghij-789012345678",
      "name": "Log Negative Review",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "slack-webhook-exists",
              "leftValue": "={{ $env.SLACK_WEBHOOK_URL }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "h8i9j0k1-l2m3-4567-hijk-890123456789",
      "name": "Slack Configured Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1780,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{ $env.SLACK_WEBHOOK_URL }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "ðŸš¨ Negative Google Review Alert: {{ $json.rating }} star review from {{ $json.author }}: \"{{ $json.text }}\" - Correlation ID: {{ $json.correlation_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "i9j0k1l2-m3n4-5678-ijkl-901234567890",
      "name": "Send Slack Alert",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2000,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Log 3-star review (neutral rating)\nconst logData = {\n  message: `Neutral Google Review (${$json.rating} stars) from ${$json.author}: \"${$json.text}\" - logged only, no action taken`,\n  correlation_id: $json.correlation_id,\n  review_id: $json.review_id,\n  rating: $json.rating,\n  author: $json.author,\n  text: $json.text,\n  timestamp: $json.timestamp,\n  action: 'logged_only'\n};\n\nconsole.log('Neutral Google Review (3 stars):', JSON.stringify(logData));\n\nreturn [{ json: logData }];"
      },
      "id": "j0k1l2m3-n4o5-6789-jklm-012345678901",
      "name": "Log Neutral Review",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        500
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch Reviews",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Reviews": {
      "main": [
        [
          {
            "node": "Normalize Review Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Review Data": {
      "main": [
        [
          {
            "node": "Insert Review Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Review Record": {
      "main": [
        [
          {
            "node": "Rating Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rating Check": {
      "main": [
        [
          {
            "node": "Call Processor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Low Rating Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Processor": {
      "main": [
        []
      ]
    },
    "Low Rating Check": {
      "main": [
        [
          {
            "node": "Log Negative Review",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Neutral Review",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Negative Review": {
      "main": [
        [
          {
            "node": "Slack Configured Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Configured Check": {
      "main": [
        [
          {
            "node": "Send Slack Alert",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Send Slack Alert": {
      "main": [
        []
      ]
    },
    "Log Neutral Review": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "google-reviews-intake",
  "tags": []
}
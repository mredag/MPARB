{
  "name": "Instagram Intake",
  "nodes": [
    {
      "parameters": {
        "path": "instagram-intake",
        "options": {}
      },
      "id": "f4b1c5e0-8b2a-4c3d-9e5f-1a2b3c4d5e6f",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "instagram-intake"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "verify-token-condition",
              "leftValue": "={{ $method === 'GET' && $json.query && $json.query['hub.mode'] === 'subscribe' ? ($json.query['hub.verify_token'] || $env.META_VERIFY_TOKEN) : $env.META_VERIFY_TOKEN }}",
              "rightValue": "={{ $env.META_VERIFY_TOKEN }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "Verify Token Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.query['hub.challenge'] }}"
      },
      "id": "b2c3d4e5-f6g7-8901-bcde-f23456789012",
      "name": "Return Challenge",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        680,
        200
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "Unauthorized",
        "responseCode": 401
      },
      "id": "c3d4e5f6-g7h8-9012-cdef-345678901234",
      "name": "Unauthorized Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        680,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Normalize Instagram webhook payload\nconst payload = $input.all()[0].json;\n\n// Handle verification request (GET request with hub.mode=subscribe)\nif (payload.query && payload.query['hub.mode'] === 'subscribe') {\n  return [{ json: { \n    isVerification: true,\n    challenge: payload.query['hub.challenge']\n  }}];\n}\n\n// Handle message webhook (POST request with entry data)\nif (payload.body && payload.body.entry) {\n  const messages = [];\n  \n  for (const entry of payload.body.entry) {\n    if (entry.messaging) {\n      for (const messaging of entry.messaging) {\n        if (messaging.message && messaging.message.text) {\n          const now = new Date();\n          const messageTime = new Date(messaging.timestamp);\n          const hoursDiff = (now - messageTime) / (1000 * 60 * 60);\n          \n          messages.push({\n            sender_id: messaging.sender.id,\n            text: messaging.message.text,\n            timestamp: new Date(messaging.timestamp).toISOString(),\n            correlation_id: require('crypto').randomUUID(),\n            platform: 'instagram',\n            hours_since_message: hoursDiff,\n            within_24h: hoursDiff <= 24\n          });\n        }\n      }\n    }\n  }\n  \n  return messages.map(msg => ({ json: msg }));\n}\n\n// Return empty array if no valid data\nreturn [];"
      },
      "id": "d4e5f6g7-h8i9-0123-defg-456789012345",
      "name": "Normalize Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "verification-check",
              "leftValue": "={{ $json.isVerification }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e5f6g7h8-i9j0-1234-efgh-567890123456",
      "name": "Is Verification",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
   
 {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.challenge }}"
      },
      "id": "f6g7h8i9-j0k1-2345-fghi-678901234567",
      "name": "Verification OK",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1340,
        200
      ]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "name"
        },
        "table": {
          "__rl": true,
          "value": "messages",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "platform": "={{ $json.platform }}",
            "external_id": "={{ $json.sender_id }}",
            "sender": "={{ $json.sender_id }}",
            "correlation_id": "={{ $json.correlation_id }}"
          },
          "matchingColumns": [],
          "schema": []
        },
        "options": {}
      },
      "id": "g7h8i9j0-k1l2-3456-ghij-789012345678",
      "name": "Insert Message Record",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1340,
        400
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "PostgreSQL Main"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "within-24h-check",
              "leftValue": "={{ $json.within_24h }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "h8i9j0k1-l2m3-4567-hijk-890123456789",
      "name": "Within 24 Hours Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1560,
        400
      ]
    },
    {
      "parameters": {
        "url": "={{ $env.N8N_WEBHOOK_URL }}/webhook/processor",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "x-correlation-id",
              "value": "={{ $json.correlation_id }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "={{ $json.text }}"
            },
            {
              "name": "platform",
              "value": "instagram"
            },
            {
              "name": "timestamp",
              "value": "={{ $json.timestamp }}"
            },
            {
              "name": "correlation_id",
              "value": "={{ $json.correlation_id }}"
            },
            {
              "name": "sender_id",
              "value": "={{ $json.sender_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "i9j0k1l2-m3n4-5678-ijkl-901234567890",
      "name": "Call Processor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1780,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Log message outside 24-hour window\nconst logData = {\n  message: `Instagram message from ${$json.sender_id} is ${$json.hours_since_message.toFixed(1)} hours old - outside 24h policy window`,\n  correlation_id: $json.correlation_id,\n  sender_id: $json.sender_id,\n  hours_old: $json.hours_since_message,\n  timestamp: $json.timestamp\n};\n\nconsole.log('Instagram 24h Policy Violation:', JSON.stringify(logData));\n\nreturn [{ json: logData }];"
      },
      "id": "j0k1l2m3-n4o5-6789-jklm-012345678901",
      "name": "Log Policy Violation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1780,
        500
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "slack-webhook-exists",
              "leftValue": "={{ $env.SLACK_WEBHOOK_URL }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "k1l2m3n4-o5p6-7890-klmn-123456789012",
      "name": "Slack Configured Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2000,
        500
      ]
    },
    {
      "parameters": {
        "url": "={{ $env.SLACK_WEBHOOK_URL }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "ðŸš¨ Instagram Policy Alert: Message from {{ $json.sender_id }} is {{ $json.hours_old }} hours old (outside 24h window). Correlation ID: {{ $json.correlation_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "l2m3n4o5-p6q7-8901-lmno-234567890123",
      "name": "Send Slack Alert",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2220,
        400
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "OK"
      },
      "id": "m3n4o5p6-q7r8-9012-mnop-345678901234",
      "name": "Final Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2000,
        300
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Verify Token Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify Token Check": {
      "main": [
        [
          {
            "node": "Normalize Payload",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unauthorized Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return Challenge": {
      "main": [
        []
      ]
    },
    "Normalize Payload": {
      "main": [
        [
          {
            "node": "Is Verification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Verification": {
      "main": [
        [
          {
            "node": "Verification OK",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Insert Message Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Message Record": {
      "main": [
        [
          {
            "node": "Within 24 Hours Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Within 24 Hours Check": {
      "main": [
        [
          {
            "node": "Call Processor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Policy Violation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Processor": {
      "main": [
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Policy Violation": {
      "main": [
        [
          {
            "node": "Slack Configured Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Configured Check": {
      "main": [
        [
          {
            "node": "Send Slack Alert",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Slack Alert": {
      "main": [
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "instagram-intake",
  "tags": []
}